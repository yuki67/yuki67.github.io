<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yuki&#39;s blog</title>
    <link>https://yuki67.github.io/</link>
    <description>Recent content on yuki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>by yuki</copyright>
    <lastBuildDate>Fri, 27 Jul 2018 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yuki67.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MinCaml をブラウザで動かした</title>
      <link>https://yuki67.github.io/post/mincaml_online/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/mincaml_online/</guid>
      <description>デモはこのページの一番下にある。
ソースコードは yuki67/MinCamlOnline にある。
何をしたか 前の記事 で bucklescript を使って OCaml プログラムをブラウザ上で動かすというのをやった。 この記事で試したのはかなり小さいプログラムだったので、もう少し大きいプログラムでも上手く行くのかどうか気になり試した。
もう少し大きいプログラムとして MinCaml を使った。 MicCaml なら自分もそれなりに中身を理解していて、プレーンの OCaml で書かれていることを知っているのでちょうどいいと思った。
感想 MinCaml をブラウザ上で動かすために bucklescript を設定するのは思っていたよりも簡単だった。 ただ動かすだけなら ocamlyacc と ocamllex を設定して C で書かれていた一部のコードを OCaml で書きなおすだけで動くようになった。
動くようにした後にテキストエリアやボタンを設定するのが多少手間だった。 ボタンが押されたときにコンパイルする関数を呼べるようにモジュールの構成を変える必要があったり、 MinCaml にコンパイル結果を文字列として返す関数が無かったのでそれも書いたりした。 これらの手間が生じたのは MinCaml がそのような用途のために書かれていないからであり、OCaml や bucklescript の問題ではない。
変換された javascript プログラムは Parsing, Lexing, Format モジュールを含めて正しく動いた。 ただし、 Format.sprintf が常識的な長さの入力に対して Maximum call stack size exceeded を出して動かないことがあった (デモで mandelbrot をコンパイルするとエラーが出る)。 bucklescript の実装が原因だと思うが、対処する方法もわからないのでそのままにした。
デモ Program  select program</description>
    </item>
    
    <item>
      <title>無限ストリーム in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/stream_cpp/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/stream_cpp/</guid>
      <description>SICP 3.5節 にある無限ストリームを C++ で実装した。 それを使ってフィボナッチ数列や素数、Aitken 加速などを実装できた。 ラムダ式とか auto とかをいい感じに使えた、と思う。 あとこの記事を描くのに noweb を使った文芸的プログラミングを初めて使った。
実装 SICP では無限ストリームは car の値と cdr 部分のストリームを計算する関数の組として実装されている。 たとえばnから始まる整数を並べた無限ストリームは
;; n から始まる整数ストリーム (define (integers-starting-from n) (cons-stream n (integers-starting-from (+ n 1)))) となる。
これと同じように C++ でストリームを実装しようとするとすごく面倒臭くなる。 C++ にはラムダ式と auto を使って関数を定義するときには再帰が使えないという制限があるので、上の例と似た関数を
// コンパイルできない auto integers_starting_from = [](auto n) {return cons(n, integers_starting_from(n + 1)); };  と定義することができず、型(いまの例なら std::functional&amp;lt;Stream&amp;lt;int&amp;gt;(int)&amp;gt; )を毎回書かなければならない。
流石にこれは面倒臭すぎるので、ストリームを配列っぽく実装した。 T 型のストリームは第n項を計算する関数によって初期化され、 一度計算した値は std::unordered_map&amp;lt;size_t, T&amp;gt; に保存される。 さらに、第n項を計算するときに他の項の値を参照できるように、ストリームを初期化するときに与える 関数には自分自身 (*this) が引数として与えられる。</description>
    </item>
    
    <item>
      <title>ob-ipython で sympy を使うときに出力を綺麗にする</title>
      <link>https://yuki67.github.io/post/ob-ipython_sympy/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/ob-ipython_sympy/</guid>
      <description>jupyter notebook で sympy を使うとセルの実行結果を Latex で表示してくれるので便利だが、 ob-ipython で sympy を使うとセルの実行結果の表示が jupyter notebook ほど便利でない。
#+BEGIN_SRC ipython :session :exports both :results output raw drawer from sympy import * init_printing() x = symbols(&amp;#34;x&amp;#34;) eqn = Eq(x**2+3*x-4) print(latex(eqn)) #+END_SRC #+RESULTS: :RESULTS: x^{2} + 3 x - 4 = 0 :END:from sympy import * init_printing() x = symbols(&amp;#34;x&amp;#34;) eqn = Eq(x**2+3*x-4) print(latex(eqn)) x2 + 3 x - 4 = 0
幸い org-babel には「src block の実行結果を別の src block に通して、その結果を元の src block の結果にする」 という機能があるので、その機能を使えばこの問題を回避した。</description>
    </item>
    
    <item>
      <title>PAPI を使った</title>
      <link>https://yuki67.github.io/post/hello_papi/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/hello_papi/</guid>
      <description>PAPI を使うと CPU のハードウェアカウンタを使って様々な値を測定できる。 例えば
 実行した命令の数 実行した浮動小数点演算の数 パイプラインがストールした回数 キャッシュヒット/ミス の回数 分岐予測の成功/失敗数  を測定できる。測定した値は FLOPS の測定なりパフォーマンスのチューニングなりに使える。
適切に設定すれば CPU 以外のハードウェアのカウンタも読めるらしいが、使ってないのでよくわからない。
インストール 昔はインストールするのにカーネルにパッチを当てる必要があったりして一苦労だったらしい (検索すると出てくる) が、 最新版の Linux カーネルであればインストールは ./configure; make; make install で済んだ。
利用可能なイベントの確認 papi_avail で利用可能なイベントの一覧を確認できる。コンシューマ向けの CPU だと性能測定用のハードウェアカウンタがしょぼいようなので、インストールしたら必ず確認したほうがいい。
自分の環境では以下のようになった。
$ papi_avail Available PAPI preset and user defined events plus hardware information. -------------------------------------------------------------------------------- PAPI version : 5.6.1.0 Operating system : Linux 4.4.0-128-generic Vendor string and code : GenuineIntel (1, 0x1) Model string and code : Intel(R) Core(TM) i7-7700 CPU @ 3.</description>
    </item>
    
    <item>
      <title>std::random_device を使うと valgrind が落ちる</title>
      <link>https://yuki67.github.io/post/valgrind_random_device/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/valgrind_random_device/</guid>
      <description>環境 valgrind 3.11, clang++ 5.0
問題 #include &amp;lt;iostream&amp;gt;#include &amp;lt;random&amp;gt; int main() { std::random_device rd; std::cout &amp;lt;&amp;lt; rd() &amp;lt;&amp;lt; std::endl; return 0; }  上記のコードはコンパイルすれば普通に実行できるが、 valgrind から実行すると valgrind が落ちる。
$ clang++ test.cpp -std=c++17 $ ./a.out 1240201163 $ /usr/bin/valgrind ./a.out ==13508== Memcheck, a memory error detector ==13508== Copyright (C) 2002-2015, and GNU GPL&amp;#39;d, by Julian Seward et al. ==13508== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info ==13508== Command: .</description>
    </item>
    
    <item>
      <title>CMakeでC&#43;&#43;17が有効にならない</title>
      <link>https://yuki67.github.io/post/cmake_c&#43;&#43;17/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/cmake_c&#43;&#43;17/</guid>
      <description>問題 CMake で set_property(TARGET hoge PROPERTY CXX_STANDARD 17) としても
CMake Error at CMakeLists.txt:16 (add_executable): CXX_STANDARD is set to invalid value &amp;#39;17&amp;#39; というエラーが出る。
原因 ppaから入れたCMakeのバージョンが古かった。
CMake 3.8 以上でないと PROPERTY CXX_STANDARD を17にすることができない。
解決法 CMakeをアップデートする。
CMakeLists.txt に cmake_minimum_required(VERSION 3.8) を追加する。
参考 CXX_STANDARD — CMake 3.7.2 Documentation
CXX_STANDARD — CMake 3.8.2 Documentation</description>
    </item>
    
    <item>
      <title>Bucklescriptで書いたお絵かきプログラム</title>
      <link>https://yuki67.github.io/post/bucklescript_paint/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/bucklescript_paint/</guid>
      <description>&lt;p&gt;前に書いたプログラムがそのままになっていたので供養。ソースコードはは &lt;a href=&#34;https://github.com/yuki67/ShapeOCaml&#34;&gt;ここ&lt;/a&gt; にある。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenGL 関係のライブラリが壊れたときの対処</title>
      <link>https://yuki67.github.io/post/opengl_broken/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/opengl_broken/</guid>
      <description>問題 glew とか GLFW とか NVidia のドライバとかを一通りインストールしたにもかかわらず OpenGL の hello world プログラムがコンパイルできない。
原因 なぜか知らないがリンクに必要なオブジェクトファイルが削除され、シンボリックリンクをたどった先が存在しないファイルになっていた。
解決法 dpkg -S コマンドでどのオブジェクトファイルがどのパッケージでインストールされたかを確認して、そのパッケージを sudo apt install --reinstall する。
例えば
$ dpkg -S /usr/lib/x86_64-linux-gnu/mesa/libGL.so libgl1-mesa-dev:amd64: /usr/lib/x86_64-linux-gnu/mesa/libGL.so となる。</description>
    </item>
    
    <item>
      <title>octave でつまづいたところ</title>
      <link>https://yuki67.github.io/post/octave_getting_started/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/octave_getting_started/</guid>
      <description>octave の本質的でない部分についてのメモ。
   問題 / 疑問 解決法 / 答え 備考     立ち上がったグラフウィンドウが消せない close Manipulation of Plot Windows   グラフの軸の縮尺が等しくない axis(&amp;quot;equal&amp;quot;) Axis Configuration   同じグラフに複数回プロットしたい hold on Manipulation of Plot Windows   今読み込んでいる変数を表示させたい whos Status of Variables   for を回している変数でインデックスを取れない int32 にキャストする range が double 型の値を返すのが原因 Ranges Integer Data Types   end と endfor と endif とでなにか違うのか なにも違わない すべて end でも構わないが、使い分けたほうがいい Statements   org-babel で関数を定義しようとするとエラーが出る src block に :session をつける インタラクティブモードでない場合、ファイル内と同じ名前の関数しか定義できない Function Files    </description>
    </item>
    
    <item>
      <title>Autoloading failed to define function … が出る</title>
      <link>https://yuki67.github.io/post/autoload_undefined_function/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/autoload_undefined_function/</guid>
      <description>問題 emacs でいつも使っているキーボードバインディングを使おうとすると Autoloading failed to define function HOGE と出て実行できない。
原因 パッケージのアップデートで HOGE 関数の名前が変更されていた。
解決法 呼び出す関数の名前を変える。
備考 定義されていない関数を呼び出した場合、普通は void-function HOGE というおなじみのエラーが表示されるのですぐ分かるが、今回のエラーは初めて見たので解決に時間がかかった。
今まで見なかったこのエラーが出た原因は HOGE のキーボードバインディングを use-package で定義していたことにあった。
(use-package package-name :bind (:map global-map (&amp;#34;KEY&amp;#34; . HOGE))) とすると、 KEY を押したときに HOGE が autoload される。その結果エラーメッセージが見慣れないものになる。</description>
    </item>
    
    <item>
      <title>octave が emacs でハングする</title>
      <link>https://yuki67.github.io/post/octave_hangs_on_emacs/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/octave_hangs_on_emacs/</guid>
      <description>問題 Ubuntu 16.04 で emacs 25.3 から octave 4.0 を使おうとするとハングする (org-babel から実行しても実行が終わらない)。
解決法 octave を最新版 (4.4) にしたら直った。最新版は ppa にないので手元でビルドした。
備考 octave の最新版をビルドするときにライブラリが足りないという警告がいくつか出るのでパッケージをインストールして対処したが、 以下の警告は最後まで残った。
configure: WARNING: SUNDIALS IDA library not configured with IDAKLU, ode15i and ode15s will not support the sparse Jacobian feature 今は ode15 コマンドを使わないのでほっておいたが、後で必要になるかもしれない。</description>
    </item>
    
    <item>
      <title>virtual なデストラクタ</title>
      <link>https://yuki67.github.io/post/c&#43;&#43;/virtual_destructor/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/c&#43;&#43;/virtual_destructor/</guid>
      <description>&lt;p&gt;基底クラスへのポインタを &lt;code&gt;delete&lt;/code&gt; する場合、基底クラスのデストラクタが &lt;code&gt;virtual&lt;/code&gt; でないと派生クラスのデストラクタが呼ばれない。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>デストラクタの呼ばれる順番</title>
      <link>https://yuki67.github.io/post/c&#43;&#43;/order_of_destructor/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/c&#43;&#43;/order_of_destructor/</guid>
      <description>&lt;p&gt;コンストラクタの逆、つまり&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;派生クラスが先、基底クラスは後&lt;/li&gt;
&lt;li&gt;複数のクラスを継承する場合、継承宣言の最後から&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の順番で呼ばれる。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>clang&#43;&#43;-5.0 を入れたのに C&#43;&#43;17 が有効にならない</title>
      <link>https://yuki67.github.io/post/clang&#43;&#43;_no_cpp17/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/clang&#43;&#43;_no_cpp17/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs の正規表現で (&#34;[&#34;, &#34;]&#34; 以外の1文字) を表現する</title>
      <link>https://yuki67.github.io/post/emacs_regex_bracket/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/emacs_regex_bracket/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>小数型を有理数に変換する in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/float_to_fraction/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/float_to_fraction/</guid>
      <description>&lt;p&gt;IEEE 754 方式の浮動小数点数ではビット列がある有理数をちょうど表す。&lt;/p&gt;

&lt;p&gt;例えば倍精度の場合、&lt;/p&gt;

&lt;p&gt;\begin{align*}
\text{s}
\ \text{e}_{11} \text{e}_{10} \ldots \text{e}_{1}
\ \text{s}_{52} \text{s}_{51} \ldots \text{s}_{1}
\end{align*}&lt;/p&gt;

&lt;p&gt;というビット列が&lt;/p&gt;

&lt;p&gt;\begin{align*}
(-1)^{\text{s}}
(1.\text{s}_{52} \text{s}_{51} \ldots \text{s}_{1})_{2}
\times 2^{(\text{e}_{11} \text{e}_{10} \ldots \text{e}_{1})_{2} - 1023}
\end{align*}&lt;/p&gt;

&lt;p&gt;という有理数を表す。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yuki67.github.io/post/constexpr/&#34;&gt; 前の記事&lt;/a&gt;で浮動小数点数を扱うクラスを作り、
&lt;a href=&#34;https://yuki67.github.io/post/big%5Ffraction/&#34;&gt; 別の記事&lt;/a&gt;で任意精度の有理数クラスを作ったので、
この２つを組み合わせれば浮動小数点数が表す有理数を計算することができる。&lt;/p&gt;

&lt;p&gt;浮動小数点数を扱うクラスを拡張してこの処理を実装した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>任意精度有理数の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/big_fraction/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/big_fraction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://yuki67.github.io/post/bigint/&#34;&gt; 前の記事&lt;/a&gt;で作った &lt;code&gt;BigInt&lt;/code&gt; クラスが上手く動くことを確かめるために有理数クラスを作って動かした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org-reveal の概要</title>
      <link>https://yuki67.github.io/post/org-reveal/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/org-reveal/</guid>
      <description>.underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( &#39;link&#39; ); link.rel = &#39;stylesheet&#39;; link.type = &#39;text/css&#39;; link.href = &#39;/reveal.js/css/print/pdf.css&#39;; document.getElementsByTagName( &#39;head&#39; )[0].appendChild( link ); }   Org-reveal  org-mode でスライドがかける    基本  org-mode の 1サブツリー = 1ページ  サブツリーを多めにして書けばそのまま読めるスライドになる    基本的な機能  試す    遅延表示 こんな ふうに 一つづつ 出せる    リンク  Google org-mode のものがそのまま使える    箇条書き  普通に 使える 遅延表示にも対応     ソースコード  htmlize.</description>
    </item>
    
    <item>
      <title>ox-hugo の概要</title>
      <link>https://yuki67.github.io/post/ox-hugo/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/ox-hugo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kaushalmodi/ox-hugo&#34;&gt;ox-hugo&lt;/a&gt; は emacs のパッケージだ。
org-mode の文章を Hugo に対応した markdown にエクスポートすることができ、このサイトの記事を書くのに使われている。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo の C&#43;&#43; 用 シンタックスハイライトを直す</title>
      <link>https://yuki67.github.io/post/hugo_cpp_highlight/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/hugo_cpp_highlight/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MathJax 数式内のフォントを変更する</title>
      <link>https://yuki67.github.io/post/mathjax_font/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/mathjax_font/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org-babel の概要</title>
      <link>https://yuki67.github.io/post/org-babel/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/org-babel/</guid>
      <description>&lt;p&gt;org mode には org-babel という機能があり、orgファイルに書いたソースコードをその場で実行できる。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org-mode の概要</title>
      <link>https://yuki67.github.io/post/org-mode/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/org-mode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; とは emacs 付属の軽量マークアップ言語で、 markdown や ReStructuredText の親戚にあたる。&lt;/p&gt;

&lt;p&gt;このページには org-mode の基本的な機能をまとめた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>このサイトの全体像</title>
      <link>https://yuki67.github.io/post/org-md-hugo/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/org-md-hugo/</guid>
      <description>&lt;p&gt;このサイトは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://orgmode.org/&#34;&gt;org mode&lt;/a&gt; で書いた文章を&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kaushalmodi/ox-hugo&#34;&gt;ox-hugo&lt;/a&gt; で markdown に変換し&lt;/li&gt;
&lt;li&gt;markdown から &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; で静的サイトを作成し&lt;/li&gt;
&lt;li&gt;そのリポジトリを github pages で公開する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という手順で作られている。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BigIntの実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/bigint/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/bigint/</guid>
      <description>&lt;p&gt;多倍長整数を実装できたのでまとめた。C++のいい練習になると思って始めたらかなり時間がかかった。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一年生の夢の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/freshmans_dream/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/freshmans_dream/</guid>
      <description>&lt;p&gt;式&lt;/p&gt;

&lt;p&gt;\begin{align*}
(x + y)^{p} = x^{p} + y^{p}
\end{align*}&lt;/p&gt;

&lt;p&gt;を一年生の夢 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Freshman%27s%5Fdream&#34;&gt;Freshman&amp;rsquo;s dream&lt;/a&gt;) という。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限体の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/finite_field/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/finite_field/</guid>
      <description>&lt;p&gt;※ 位数が素数である場合に限る&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;のconstexpr</title>
      <link>https://yuki67.github.io/post/constexpr/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/constexpr/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10 で MDR-1000X を使う</title>
      <link>https://yuki67.github.io/post/ubuntu_bluetooth/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/ubuntu_bluetooth/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10 で Kindle for PC を使う</title>
      <link>https://yuki67.github.io/post/kindle_for_ubuntu/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/kindle_for_ubuntu/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python風Rangeの実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/python_like_range/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/python_like_range/</guid>
      <description>&lt;p&gt;範囲forについて学んだので実装した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10で最大化/最小化ボタンを左へ移動する</title>
      <link>https://yuki67.github.io/post/buttons_to_left/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/buttons_to_left/</guid>
      <description>&lt;p&gt;これ↓&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://yuki67.github.io/ox-hugo/buttons.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>古いファイルを削除してファイルの数を一定にする</title>
      <link>https://yuki67.github.io/post/delete_old_files/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/delete_old_files/</guid>
      <description>&lt;p&gt;ログの整理で使った。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MinCamlをjbuilderでビルドする</title>
      <link>https://yuki67.github.io/post/mincaml_jbuilder/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/mincaml_jbuilder/</guid>
      <description>&lt;p&gt;org-modeで書いて&lt;a href=&#34;http://e-yuki67.hatenablog.com/entry/2017/12/13/215123&#34;&gt;はてな&lt;/a&gt;に公開したものを貼る。&lt;/p&gt;

&lt;p&gt;文章さえ書けばはてなに移すのは楽だろうと思ったが、画像をアップロードしたりリンクを張り替えたりするのは結構な手間だったので次からはやめよう。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CudaとOpenGLを連携させてアニメーションを描画する</title>
      <link>https://yuki67.github.io/post/cuda_animation/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/cuda_animation/</guid>
      <description>&lt;p&gt;CUDAを使って毎フレーム画像を更新したいが、いちいち画像をCPUに送り返している暇がないときに。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cudaプログラムの実行時間測定</title>
      <link>https://yuki67.github.io/post/cuda_time/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/cuda_time/</guid>
      <description>&lt;p&gt;Cuda入門に出てきた関数をクラスにまとめたので、コピペ用に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ビットマップをOpenGLで描画する</title>
      <link>https://yuki67.github.io/post/cuda_bitmap/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/cuda_bitmap/</guid>
      <description>&lt;p&gt;cudaでビットマップを作って、それをOpenGLを使ってウィンドウ上に表示したい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hugoに移行した</title>
      <link>https://yuki67.github.io/post/to_hugo/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/to_hugo/</guid>
      <description>&lt;p&gt;前からhugoというスタティックサイトジェネレータが気になっていて試してみたりもしたのが、
org-modeで記事が書けると公式で言われている割にほとんど使い物にならず、移行はしていなかった。&lt;/p&gt;

&lt;p&gt;今回もう一度トライした結果ox-hugoという拡張機能がほぼ自分の思っていた通りのことをしてくれることが分かったので、
思い切って移行した。ox-hugoがとても気が利いているので、移行はほぼコピペだけですんだ。&lt;/p&gt;

&lt;p&gt;記事を最近書いていないのに移項だけするのは気が引けたが、見栄えもよくなったし記事を書くのも
かなり楽になったのでよしとしよう。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hello bucklescript!</title>
      <link>https://yuki67.github.io/post/hello_buckle/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/hello_buckle/</guid>
      <description>&lt;p&gt;bucklescriptを使うとOCamlを使ってjavascriptが書けると聞いたので試した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>オートマトン in OCaml</title>
      <link>https://yuki67.github.io/post/automaton/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/automaton/</guid>
      <description>&lt;p&gt;前にpythonでやったことをOCamlでやったのでまとめた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>教科書</title>
      <link>https://yuki67.github.io/post/textbooks/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/textbooks/</guid>
      <description>&lt;p&gt;講義で使った教科書のリスト。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ランダムピック</title>
      <link>https://yuki67.github.io/post/random_pick/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/random_pick/</guid>
      <description>&lt;p&gt;整数の組 \((i, j)\) に対してランダムな整数を割り振りたい。
それも、全ての組について乱数を保存することなく割り振りたい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>パーリンノイズ</title>
      <link>https://yuki67.github.io/post/perlin_noise/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/perlin_noise/</guid>
      <description>&lt;p&gt;書いたので。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>逆関数法</title>
      <link>https://yuki67.github.io/post/inverse_method/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/inverse_method/</guid>
      <description>&lt;p&gt;ある分布が与えられたときにその分布に従う乱数を生成することを考える。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>モンテカルロ積分</title>
      <link>https://yuki67.github.io/post/montecarlo_integral/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/montecarlo_integral/</guid>
      <description>&lt;p&gt;積分&lt;/p&gt;

&lt;p&gt;\[
\int_0^{10} e^{-x^2}dx = 0.886227&amp;hellip;
\]&lt;/p&gt;

&lt;p&gt;を、計算で求めることを考える。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nikolaでブログはじめました</title>
      <link>https://yuki67.github.io/post/hazimemasita/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/hazimemasita/</guid>
      <description>&lt;p&gt;(今はnikolaを使っておらず、Hugoに移行した。)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>