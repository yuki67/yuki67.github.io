<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on yuki&#39;s blog</title>
    <link>https://yuki67.github.io/tags/cpp/</link>
    <description>Recent content in Cpp on yuki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>by yuki</copyright>
    <lastBuildDate>Wed, 20 Jun 2018 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yuki67.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PAPI を使った</title>
      <link>https://yuki67.github.io/post/hello_papi/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/hello_papi/</guid>
      <description>PAPI を使うと CPU のハードウェアカウンタを使って様々な値を測定できる。 例えば
 実行した命令の数 実行した浮動小数点演算の数 パイプラインがストールした回数 キャッシュヒット/ミス の回数 分岐予測の成功/失敗数  を測定できる。測定した値は FLOPS の測定なりパフォーマンスのチューニングに使える。
適切に設定すれば CPU 以外のハードウェアのカウンタも読めるらしいが、使ってないのでよくわからない。
インストール 昔はインストールするのにカーネルにパッチを当てる必要があったりして一苦労だったらしい (検索すると出てくる) が、 最新版の Linux カーネルであればインストールは ./configure; make; make install で済んだ。
利用可能なイベントの確認 papi_avail で利用可能なイベントの一覧を確認できる。コンシューマ向けの CPU だと性能測定用のハードウェアカウンタがしょぼいようなので、インストールしたら必ず確認したほうがいい。
自分の環境では以下のようになった。
$ papi_avail Available PAPI preset and user defined events plus hardware information. -------------------------------------------------------------------------------- PAPI version : 5.6.1.0 Operating system : Linux 4.4.0-128-generic Vendor string and code : GenuineIntel (1, 0x1) Model string and code : Intel(R) Core(TM) i7-7700 CPU @ 3.</description>
    </item>
    
    <item>
      <title>CMakeでC&#43;&#43;17が有効にならない</title>
      <link>https://yuki67.github.io/post/cmake_c&#43;&#43;17/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/cmake_c&#43;&#43;17/</guid>
      <description>問題 CMake で set_property(TARGET hoge PROPERTY CXX_STANDARD 17) としても
CMake Error at CMakeLists.txt:16 (add_executable): CXX_STANDARD is set to invalid value &amp;#39;17&amp;#39; というエラーが出る。
原因 ppaから入れたCMakeのバージョンが古かった。
CMake 3.8 以上でないと PROPERTY CXX_STANDARD を17にすることができない。
解決法 CMakeをアップデートする。
CMakeLists.txt に cmake_minimum_required(VERSION 3.8) を追加する。
参考 CXX_STANDARD — CMake 3.7.2 Documentation
CXX_STANDARD — CMake 3.8.2 Documentation</description>
    </item>
    
    <item>
      <title>virtual なデストラクタ</title>
      <link>https://yuki67.github.io/post/c&#43;&#43;/virtual_destructor/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/c&#43;&#43;/virtual_destructor/</guid>
      <description>&lt;p&gt;基底クラスへのポインタを &lt;code&gt;delete&lt;/code&gt; する場合、基底クラスのデストラクタが &lt;code&gt;virtual&lt;/code&gt; でないと派生クラスのデストラクタが呼ばれない。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>デストラクタの呼ばれる順番</title>
      <link>https://yuki67.github.io/post/c&#43;&#43;/order_of_destructor/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/c&#43;&#43;/order_of_destructor/</guid>
      <description>&lt;p&gt;コンストラクタの逆、つまり&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;派生クラスが先、基底クラスは後&lt;/li&gt;
&lt;li&gt;複数のクラスを継承する場合、継承宣言の最後から&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の順番で呼ばれる。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>clang&#43;&#43;-5.0 を入れたのに C&#43;&#43;17 が有効にならない</title>
      <link>https://yuki67.github.io/post/clang&#43;&#43;_no_cpp17/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/clang&#43;&#43;_no_cpp17/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>小数型を有理数に変換する in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/float_to_fraction/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/float_to_fraction/</guid>
      <description>&lt;p&gt;IEEE 754 方式の浮動小数点数ではビット列がある有理数をちょうど表す。&lt;/p&gt;

&lt;p&gt;例えば倍精度の場合、&lt;/p&gt;

&lt;p&gt;\begin{align*}
\text{s}
\ \text{e}_{11} \text{e}_{10} \ldots \text{e}_{1}
\ \text{s}_{52} \text{s}_{51} \ldots \text{s}_{1}
\end{align*}&lt;/p&gt;

&lt;p&gt;というビット列が&lt;/p&gt;

&lt;p&gt;\begin{align*}
(-1)^{\text{s}}
(1.\text{s}_{52} \text{s}_{51} \ldots \text{s}_{1})_{2}
\times 2^{(\text{e}_{11} \text{e}_{10} \ldots \text{e}_{1})_{2} - 1023}
\end{align*}&lt;/p&gt;

&lt;p&gt;という有理数を表す。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yuki67.github.io/post/constexpr/&#34;&gt; 前の記事&lt;/a&gt;で浮動小数点数を扱うクラスを作り、
&lt;a href=&#34;https://yuki67.github.io/post/big_fraction/&#34;&gt; 別の記事&lt;/a&gt;で任意精度の有理数クラスを作ったので、
この２つを組み合わせれば浮動小数点数が表す有理数を計算することができる。&lt;/p&gt;

&lt;p&gt;浮動小数点数を扱うクラスを拡張してこの処理を実装した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>任意精度有理数の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/big_fraction/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/big_fraction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://yuki67.github.io/post/bigint/&#34;&gt; 前の記事&lt;/a&gt;で作った &lt;code&gt;BigInt&lt;/code&gt; クラスが上手く動くことを確かめるために有理数クラスを作って動かした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BigIntの実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/bigint/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/bigint/</guid>
      <description>&lt;p&gt;多倍長整数を実装できたのでまとめた。C++のいい練習になると思って始めたらかなり時間がかかった。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一年生の夢の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/freshmans_dream/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/freshmans_dream/</guid>
      <description>&lt;p&gt;式&lt;/p&gt;

&lt;p&gt;\begin{align*}
(x + y)^{p} = x^{p} + y^{p}
\end{align*}&lt;/p&gt;

&lt;p&gt;を一年生の夢 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Freshman%27s_dream&#34;&gt;Freshman&amp;rsquo;s dream&lt;/a&gt;) という。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限体の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/finite_field/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/finite_field/</guid>
      <description>&lt;p&gt;※ 位数が素数である場合に限る&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;のconstexpr</title>
      <link>https://yuki67.github.io/post/constexpr/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/constexpr/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python風Rangeの実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/python_like_range/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/python_like_range/</guid>
      <description>&lt;p&gt;範囲forについて学んだので実装した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>