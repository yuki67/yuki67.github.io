<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on yuki&#39;s blog</title>
    <link>https://yuki67.github.io/tags/cpp/</link>
    <description>Recent content in Cpp on yuki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>by yuki</copyright>
    <lastBuildDate>Sun, 29 Apr 2018 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yuki67.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>virtual なデストラクタ</title>
      <link>https://yuki67.github.io/post/c&#43;&#43;/virtual_destructor/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/c&#43;&#43;/virtual_destructor/</guid>
      <description>基底クラスへのポインタを delete する場合、基底クラスのデストラクタが virtual でないと派生クラスのデストラクタが呼ばれない。

#include &amp;lt;iostream&amp;gt; struct Base_Non_Virtual { ~Base_Non_Virtual() { std::cout &amp;lt;&amp;lt; &amp;#34;~Base_Non_Virtual()\n&amp;#34;; } }; struct Derived_Non_Virtual : Base_Non_Virtual { ~Derived_Non_Virtual() { std::cout &amp;lt;&amp;lt; &amp;#34;~Derived_Non_Virtual()\n&amp;#34;; } }; struct Base_Virtual { virtual ~Base_Virtual() { std::cout &amp;lt;&amp;lt; &amp;#34;~Base_Virtual()\n&amp;#34;; } }; struct Derived_Virtual : Base_Virtual { ~Derived_Virtual() { std::cout &amp;lt;&amp;lt; &amp;#34;~Derived_Virtual()\n&amp;#34;; } }; int main() { Base_Non_Virtual *ptr1 = new Derived_Non_Virtual(); std::cout &amp;lt;&amp;lt; &amp;#34;deleting Base_Non_Virtual* value that points to Derived_Non_Virtual value\n&amp;#34;; delete ptr1; std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; Base_Virtual *ptr2 = new Derived_Virtual(); std::cout &amp;lt;&amp;lt; &amp;#34;deleting Base_Virtual* value that points to Derived_Virtual value\n&amp;#34;; delete ptr2; return 0; } deleting Base_Non_Virtual* value that points to Derived_Non_Virtual value ~Base_Non_Virtual() deleting Base_Virtual* value that points to Derived_Virtual value ~Derived_Virtual() ~Base_Virtual() 参考 c++ - When to use virtual destructors?</description>
    </item>
    
    <item>
      <title>デストラクタの呼ばれる順番</title>
      <link>https://yuki67.github.io/post/c&#43;&#43;/order_of_destructor/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/c&#43;&#43;/order_of_destructor/</guid>
      <description> コンストラクタの逆、つまり
 派生クラスが先、基底クラスは後 複数のクラスを継承する場合、継承宣言の最後から  の順番で呼ばれる。

#include &amp;lt;iostream&amp;gt; class Base1 { public: virtual ~Base1() { std::cout &amp;lt;&amp;lt; &amp;#34;~Base1()\n&amp;#34;; } }; class Base2 { public: virtual ~Base2() { std::cout &amp;lt;&amp;lt; &amp;#34;~Base2()\n&amp;#34;; } }; class Base3 { public: virtual ~Base3() { std::cout &amp;lt;&amp;lt; &amp;#34;~Base3()\n&amp;#34;; } }; class Derived123: Base1, Base2, Base3 { public: virtual ~Derived123() { std::cout &amp;lt;&amp;lt; &amp;#34;~Derived123()\n&amp;#34;; } }; class Derived321: Base3, Base2, Base1 { public: virtual ~Derived321() { std::cout &amp;lt;&amp;lt; &amp;#34;~Derived321()\n&amp;#34;; } }; class Derived312: Base3, Base1, Base2 { public: virtual ~Derived312() { std::cout &amp;lt;&amp;lt; &amp;#34;~Derived312()\n&amp;#34;; } }; int main() { auto ptr123 = new Derived123(); std::cout &amp;lt;&amp;lt; &amp;#34;deleting Derived123* value\n&amp;#34;; delete ptr123; std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; auto ptr321 = new Derived321(); std::cout &amp;lt;&amp;lt; &amp;#34;deleting Derived321* value\n&amp;#34;; delete ptr321; std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; auto ptr312 = new Derived312(); std::cout &amp;lt;&amp;lt; &amp;#34;deleting Derived312* value\n&amp;#34;; delete ptr312; return 0; } deleting Derived123* value ~Derived123() ~Base3() ~Base2() ~Base1() deleting Derived321* value ~Derived321() ~Base1() ~Base2() ~Base3() deleting Derived312* value ~Derived312() ~Base2() ~Base1() ~Base3() 参考  What is the order in which the destructors and the constructors are called in C++ - Stack Overflow c++ - Order of destruction in the case of multiple inheritance - Stack Overflow /li  </description>
    </item>
    
    <item>
      <title>clang&#43;&#43;-5.0 を入れたのに C&#43;&#43;17 が有効にならない</title>
      <link>https://yuki67.github.io/post/clang&#43;&#43;_no_cpp17/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/clang&#43;&#43;_no_cpp17/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>小数型を有理数に変換する in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/float_to_fraction/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/float_to_fraction/</guid>
      <description>&lt;p&gt;IEEE 754 方式の浮動小数点数ではビット列がある有理数をちょうど表す。&lt;/p&gt;

&lt;p&gt;例えば倍精度の場合、&lt;/p&gt;

&lt;p&gt;\begin{align*}
\text{s}
\ \text{e}_{11} \text{e}_{10} \ldots \text{e}_{1}
\ \text{s}_{52} \text{s}_{51} \ldots \text{s}_{1}
\end{align*}&lt;/p&gt;

&lt;p&gt;というビット列が&lt;/p&gt;

&lt;p&gt;\begin{align*}
(-1)^{\text{s}}
(1.\text{s}_{52} \text{s}_{51} \ldots \text{s}_{1})_{2}
\times 2^{(\text{e}_{11} \text{e}_{10} \ldots \text{e}_{1})_{2} - 1023}
\end{align*}&lt;/p&gt;

&lt;p&gt;という有理数を表す。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yuki67.github.io/post/constexpr/&#34;&gt; 前の記事&lt;/a&gt;で浮動小数点数を扱うクラスを作り、
&lt;a href=&#34;https://yuki67.github.io/post/big_fraction/&#34;&gt; 別の記事&lt;/a&gt;で任意精度の有理数クラスを作ったので、
この２つを組み合わせれば浮動小数点数が表す有理数を計算することができる。&lt;/p&gt;

&lt;p&gt;浮動小数点数を扱うクラスを拡張してこの処理を実装した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>任意精度有理数の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/big_fraction/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/big_fraction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://yuki67.github.io/post/bigint/&#34;&gt; 前の記事&lt;/a&gt;で作った &lt;code&gt;BigInt&lt;/code&gt; クラスが上手く動くことを確かめるために有理数クラスを作って動かした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BigIntの実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/bigint/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/bigint/</guid>
      <description>&lt;p&gt;多倍長整数を実装できたのでまとめた。C++のいい練習になると思って始めたらかなり時間がかかった。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一年生の夢の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/freshmans_dream/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/freshmans_dream/</guid>
      <description>&lt;p&gt;式&lt;/p&gt;

&lt;p&gt;\begin{align*}
(x + y)^{p} = x^{p} + y^{p}
\end{align*}&lt;/p&gt;

&lt;p&gt;を一年生の夢 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Freshman%27s_dream&#34;&gt;Freshman&amp;rsquo;s dream&lt;/a&gt;) という。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限体の実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/finite_field/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/finite_field/</guid>
      <description>&lt;p&gt;※ 位数が素数である場合に限る&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;のconstexpr</title>
      <link>https://yuki67.github.io/post/constexpr/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/constexpr/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python風Rangeの実装 in C&#43;&#43;</title>
      <link>https://yuki67.github.io/post/python_like_range/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0900</pubDate>
      
      <guid>https://yuki67.github.io/post/python_like_range/</guid>
      <description>&lt;p&gt;範囲forについて学んだので実装した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>